#!/bin/bash
#
# graphiti - Startup script for the Graphiti dashboard
#
# chkconfig: - 98 02
# description: Graphiti dashboard (frontend) for Graphite

### BEGIN INIT INFO
# Provides: graphiti
# Required-Start: $local_fs $network $remote_fs
# Required-Stop: $local_fs $network $remote_fs
# Should-Start: $named $time
# Should-Stop: $named $time
# Short-Description: Startup script for the Graphiti dashboard
# Description: Graphiti dashboard (frontend) for Graphite
### END INIT INFO

# Source function library
. /etc/init.d/functions

exec="<%= node['graphiti']['base'] %>/bin/unicorn_rails"
prog="graphiti"

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

config=${CONFIG-<%= node['graphiti']['base'] %>/config/unicorn.rb}
pidfile=${PIDFILE-/var/run/unicorn/unicorn.pid}
railsroot=${RAILS_ROOT-<%= node['graphiti']['base'] %>}
railsenv=${RAILS_ENV-production}
lockfile=${LOCKFILE-/var/lock/subsys/$prog}
unicornport=${UNICORN_PORT-<%= node['graphiti']['port'] %>}

start() {
    [ -x $exec ] || exit 5
    [ -f $config ] || exit 6
    echo -n $"Starting $prog: "
    daemon --user graphiti $exec -c $config -E $railsenv -p $unicornport -D
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
    return 0
}

stop() {
    echo -n $"Stopping $prog: "
    killproc -p $pidfile $exec
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
    return 0
}

restart () {
    stop
    start
}

reload() {
    echo -n $"Reloading $prog: "
    killproc -p $pidfile $exec -HUP
    retval=$?
    echo
    return $retval
    return 0
}

force_reload() {
    restart
}

rh_status() {
    # run checks to determine if the service is running or use generic status
    status -p $pidfile $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac
exit $?
